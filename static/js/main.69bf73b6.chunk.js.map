{"version":3,"sources":["citydropdown.tsx","tweeta.tsx","tweetCard.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["CityDropdown","props","handleChange","bind","event","data","this","onSelection","value","Dropdown","button","className","floating","labeled","icon","options","cities","search","placeholder","onChange","style","fontSize","marginLeft","backgroundColor","color","React","Tweeta","Component","state","bbigrams","tbigrams","isLoaded","tweets","bio","componentDidMount","a","Math","floor","random","length","bigrams","possiblewords","b","split","push","randomchoice","word","sentlength","newword","seed","startsent","sent","nextword","getword","exec","wordgen","filename","city","filename2","fetch","then","r","json","text","setState","i","t","console","log","Icon","name","size","Feed","margin","maxWidth","padding","borderRadius","map","e","Button","onClick","handleExit","Placeholder","fluid","minHeight","minWidth","Header","image","Line","App","handleSelection","showTweets","cityfile","toLowerCase","replace","cityname","animated","Content","visible","hidden","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.69bf73b6.chunk.js","sourcesContent":["// import React from 'react';\nimport * as React from 'react';\nimport { Dropdown } from 'semantic-ui-react';\nimport cities from './dropdowncities.json';\n\nexport interface Props {\n\tonSelection: any;\n}\n\nexport interface State {}\n\nclass CityDropdown extends React.Component<Props, State> {\n\tconstructor(props: Props) {\n\t\tsuper(props);\n\t\tthis.handleChange = this.handleChange.bind(this);\n\t}\n\n\thandleChange(event: any, data: any) {\n\t\tthis.props.onSelection(data.value);\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<Dropdown\n\t\t\t\tbutton\n\t\t\t\tclassName=\"icon\"\n\t\t\t\tfloating\n\t\t\t\tlabeled\n\t\t\t\ticon=\"point\"\n\t\t\t\toptions={cities}\n\t\t\t\tsearch\n                placeholder=\"\"\n                onChange={this.handleChange}\n\t\t\t\tstyle={{\n\t\t\t\t\tfontSize: '18px',\n\t\t\t\t\tmarginLeft: '10px',\n\t\t\t\t\tbackgroundColor: '#486983b4',\n\t\t\t\t\tcolor: '#e1e8ed',\n\t\t\t\t}}\n\t\t\t/>\n\t\t);\n\t}\n}\n\nexport default CityDropdown;\n","import * as React from 'react';\nimport './App.css';\nimport { Placeholder, Icon, Button, Feed } from 'semantic-ui-react';\nimport TweetCard from './tweetCard';\nimport { TransitionGroup, CSSTransition } from 'react-transition-group'; // ES6\n\ninterface Props {\n\tcity: string;\n\tcityname: string;\n\thandleExit: any;\n}\ninterface State {\n\ttbigrams: any;\n\tbbigrams: any;\n\ttweets: any[];\n\tbio: string;\n\tisLoaded: boolean;\n}\nclass Tweeta extends React.Component<Props, State> {\n\tconstructor(props: Props, state: State) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tbbigrams: null,\n\t\t\ttbigrams: null,\n\t\t\tisLoaded: false,\n\t\t\ttweets: [],\n\t\t\tbio: '',\n\t\t};\n\t\tthis.componentDidMount = this.componentDidMount.bind(this);\n\t}\n\n\t// helper function that returns random element given array\n\trandomchoice(a: string[]) {\n\t\treturn a[Math.floor(Math.random() * a.length)];\n\t}\n\n\tstartsent(bigrams: any) {\n\t\tlet possiblewords: string[] = [];\n\t\tlet first: string = '';\n\t\tfor (let b in bigrams) {\n\t\t\tfirst = b.split(' ')[0];\n\t\t\tif (first === 'begsent' && bigrams[b] > 1) {\n\t\t\t\tpossiblewords.push(b);\n\t\t\t}\n\t\t}\n\t\treturn this.randomchoice(possiblewords);\n\t}\n\n\tgetword(word: string, bigrams: any, sentlength: number, length: number) {\n\t\tlet possiblewords: string[] = [];\n\t\tlet newword: string,\n\t\t\tfirst: string = '';\n\n\t\tfor (let b in bigrams) {\n\t\t\tfirst = b.split(' ')[0];\n\n\t\t\tif (first === word && bigrams[b] > 0) {\n\t\t\t\tnewword = b.split(' ')[1];\n\t\t\t\tif (sentlength > length - 10 && newword === 'endsent') {\n\t\t\t\t\treturn '';\n\t\t\t\t} else {\n\t\t\t\t\tpossiblewords.push(newword);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (possiblewords.length === 0) return '';\n\t\telse {\n\t\t\tnewword = this.randomchoice(possiblewords);\n\t\t\tif (newword === 'endsent') return '';\n\t\t\telse return newword;\n\t\t}\n\t}\n\n\twordgen(length: number, bigrams: any) {\n\t\tconst seed: string = this.startsent(bigrams);\n\t\tlet sent: any = seed ? seed.split(' ')[1] : '';\n\n\t\tlet nextword = this.getword(sent, bigrams, 0, length);\n\t\twhile (nextword !== '' && sent.length < length) {\n\t\t\tsent += ' ' + nextword;\n\t\t\tnextword = this.getword(nextword, bigrams, sent.length, length);\n\t\t}\n\n\t\tif (sent !== '' && (/@/.exec(sent) || []).length === sent.length) {\n\t\t\tsent = this.wordgen(length, bigrams);\n\t\t} else {\n\t\t\treturn sent;\n\t\t}\n\t}\n\n\tcomponentDidMount() {\n\t\tconst filename = 'data/ngramsbycity/' + this.props.city + '.json';\n\t\tconst filename2 = 'data/biosbycity/' + this.props.city + '.json';\n\t\tfetch(filename)\n\t\t\t.then((r: any) => r.json())\n\t\t\t.then((text: any) => {\n\t\t\t\tthis.setState({ tbigrams: text });\n\t\t\t});\n\n\t\tfetch(filename2)\n\t\t\t.then((r: any) => r.json())\n\t\t\t.then((text: any) => {\n\t\t\t\tthis.setState({ bbigrams: text });\n\t\t\t});\n\n\t\tthis.setState({ isLoaded: true });\n\t}\n\n\trender() {\n\t\t// const { bio, tweets } = this.state;\n\n\t\tif (this.state.isLoaded) {\n\t\t\tlet tweets: string[] = [];\n\n\t\t\tfor (let i: number = 0; i < 10; i++) {\n\t\t\t\tlet t = this.wordgen(140, this.state.tbigrams);\n\t\t\t\ttweets.push(t);\n\t\t\t}\n            let bio = this.wordgen(280, this.state.bbigrams);\n            \n            console.log(tweets)\n\n\t\t\treturn (\n\t\t\t\t<div className=\"App\">\n\t\t\t\t\t<div className=\"search-container results\">\n\t\t\t\t\t\t<div className=\"results-card\">\n\t\t\t\t\t\t\t<div className=\"search-header\">\n\t\t\t\t\t\t\t\t<Icon name=\"twitter\" size=\"big\" className=\"twit\" />\n\t\t\t\t\t\t\t\ttweetlike\n\t\t\t\t\t\t\t</div>\n                            <div className=\"bio\">{bio}</div>\n\t\t\t\t\t\t\t<Feed\n\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\tmargin: '10px',\n\t\t\t\t\t\t\t\t\tmaxWidth: '70vw',\n\t\t\t\t\t\t\t\t\tbackgroundColor: '#e1e8ed',\n\t\t\t\t\t\t\t\t\tpadding: '30px',\n\t\t\t\t\t\t\t\t\tborderRadius: '5px',\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{/* <TransitionGroup> */}\n\t\t\t\t\t\t\t\t{tweets.map((e) => {\n\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t// <CSSTransition\n\t\t\t\t\t\t\t\t\t\t// \tid={id}\n\t\t\t\t\t\t\t\t\t\t// \ttimeout={200}\n\t\t\t\t\t\t\t\t\t\t// \tclassNames=\"tweet\"\n\t\t\t\t\t\t\t\t\t\t// >\n\t\t\t\t\t\t\t\t\t\t<TweetCard\n\t\t\t\t\t\t\t\t\t\t\tusername=\"tweetlike\"\n\t\t\t\t\t\t\t\t\t\t\ttext={e}\n\t\t\t\t\t\t\t\t\t\t\tlocation={this.props.cityname}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t// </CSSTransition>\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t\t{/* </TransitionGroup> */}\n\t\t\t\t\t\t\t</Feed>\n\t\t\t\t\t\t\t<Button onClick={this.props.handleExit} icon=\"redo\" />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t);\n\t\t} else\n\t\t\treturn (\n\t\t\t\t<div className=\"App\">\n\t\t\t\t\t<div className=\"search-container results\">\n\t\t\t\t\t\t<div className=\"search-card\">\n\t\t\t\t\t\t\t<div className=\"search-header\">\n\t\t\t\t\t\t\t\t<Icon name=\"twitter\" size=\"big\" className=\"twit\" />\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\tbackgroundColor: 'white',\n\t\t\t\t\t\t\t\t\tpadding: '30px',\n\t\t\t\t\t\t\t\t\tmargin: '10px',\n\t\t\t\t\t\t\t\t\tborderRadius: '5px',\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<Placeholder\n\t\t\t\t\t\t\t\t\tfluid\n\t\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\t\tcolor: '#e1e8ed',\n\t\t\t\t\t\t\t\t\t\tminHeight: '250px',\n\t\t\t\t\t\t\t\t\t\tborderRadius: '5px',\n\t\t\t\t\t\t\t\t\t\tmargin: '10px',\n\t\t\t\t\t\t\t\t\t\tminWidth: '40vw',\n\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<Placeholder.Header image>\n\t\t\t\t\t\t\t\t\t\t<Placeholder.Line length=\"full\" />\n\t\t\t\t\t\t\t\t\t\t<Placeholder.Line length=\"full\" />\n\t\t\t\t\t\t\t\t\t</Placeholder.Header>\n\t\t\t\t\t\t\t\t\t<Placeholder.Header length=\"full\" image>\n\t\t\t\t\t\t\t\t\t\t<Placeholder.Line length=\"full\" />\n\t\t\t\t\t\t\t\t\t\t<Placeholder.Line length=\"full\" />\n\t\t\t\t\t\t\t\t\t</Placeholder.Header>\n\t\t\t\t\t\t\t\t\t<Placeholder.Header length=\"full\" image>\n\t\t\t\t\t\t\t\t\t\t<Placeholder.Line length=\"full\" />\n\t\t\t\t\t\t\t\t\t\t<Placeholder.Line length=\"full\" />\n\t\t\t\t\t\t\t\t\t</Placeholder.Header>\n\t\t\t\t\t\t\t\t\t<Placeholder.Header length=\"full\" image>\n\t\t\t\t\t\t\t\t\t\t<Placeholder.Line length=\"full\" />\n\t\t\t\t\t\t\t\t\t\t<Placeholder.Line length=\"full\" />\n\t\t\t\t\t\t\t\t\t</Placeholder.Header>\n\t\t\t\t\t\t\t\t\t<Placeholder.Header length=\"full\" image>\n\t\t\t\t\t\t\t\t\t\t<Placeholder.Line length=\"full\" />\n\t\t\t\t\t\t\t\t\t\t<Placeholder.Line />\n\t\t\t\t\t\t\t\t\t</Placeholder.Header>\n\t\t\t\t\t\t\t\t</Placeholder>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<Button onClick={this.props.handleExit} icon=\"redo\" />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t);\n\t}\n}\n\nexport default Tweeta;\n","import React, { Component } from 'react';\nimport { Feed } from 'semantic-ui-react';\n\ninterface Props {\n\ttext: string;\n\tusername: string;\n\tlocation: string;\n}\n\ninterface State {}\n\nclass TweetCard extends Component<Props, State> {\n\t// state = {  }\n\n\trender() {\n        let today = new Date();\n\t\tlet dd = String(today.getDate()).padStart(2, '0');\n\t\tlet mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\n\t\tlet yyyy = today.getFullYear();\n\n\t\tlet date:String = mm + '/' + dd + '/' + yyyy;\n        const url = 'https://twitter.com/' + this.props.username;\n\t\treturn (\n\t\t\t<Feed.Event>\n\t\t\t\t<Feed.Content>\n\t\t\t\t\t<Feed.Summary\n\t\t\t\t\t\tclassName=\"results-text\"\n\t\t\t\t\t\tstyle={{ paddingBottom: '10px' }}\n\t\t\t\t\t>\n\t\t\t\t\t\t<a href={url} target=\"_blank\">\n\t\t\t\t\t\t\t@{this.props.username}\n\t\t\t\t\t\t</a>\n\t\t\t\t\t\t<Feed.Date>· {date}</Feed.Date>\n\t\t\t\t\t\t<Feed.Extra text>{this.props.text} </Feed.Extra>\n\t\t\t\t\t\t<Feed.Date>From: {this.props.location}</Feed.Date>\n\t\t\t\t\t</Feed.Summary>\n\t\t\t\t</Feed.Content>\n\t\t\t</Feed.Event>\n\t\t);\n\t}\n}\n\nexport default TweetCard;\n","import React from 'react';\nimport './App.css';\nimport CityDropdown from './citydropdown';\nimport Tweeta from './tweeta';\nimport { Icon, Button, Placeholder } from 'semantic-ui-react';\n\ninterface Props {}\n\ninterface State {\n\tcity: string;\n\tshowTweets: boolean;\n\tcityfile: string;\n}\n\nclass App extends React.Component<Props, State> {\n\tconstructor(props: Props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tcity: '',\n\t\t\tshowTweets: false,\n\t\t\t// showTweets: false,\n\t\t\t// cityfile:\"\",\n\t\t\tcityfile: '',\n\t\t};\n\t}\n\n\thandleSelection = (city: string) => {\n\t\tthis.setState({ city: city });\n\t};\n\n\tshowTweets = (e: any) => {\n\t\tconsole.log(e);\n\t\tconst fullcity = this.state.city.split(', ');\n\t\tconst cityfile = fullcity[0].toLowerCase().replace(/ /g, '');\n\t\tthis.setState({ cityfile: cityfile });\n\t\tif (cityfile !== '') this.setState({ showTweets: true });\n\t};\n\n\thandleExit = () => {\n\t\tthis.setState({ showTweets: false, city: '' });\n\t};\n\n\trender() {\n\t\tif (!this.state.showTweets) {\n\t\t\treturn (\n\t\t\t\t<div className=\"App\">\n\t\t\t\t\t<div className=\"search-container\">\n\t\t\t\t\t\t<div className=\"search-card\">\n\t\t\t\t\t\t\t<div className=\"search-header\">\n\t\t\t\t\t\t\t\t<Icon name=\"twitter\" size=\"big\" className=\"twit\" />\n\t\t\t\t\t\t\t\ttweetlike\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"search-header\">\n\t\t\t\t\t\t\t\t{/* like i'm from {this.state.city ? this.state.city : '...'} */}\n\t\t\t\t\t\t\t\t<span style={{ fontSize: '22px' }}> tweet like i'm from </span>\n\t\t\t\t\t\t\t\t<span className=\"selection\">\n\t\t\t\t\t\t\t\t\t<CityDropdown onSelection={this.handleSelection} />\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\tanimated\n\t\t\t\t\t\t\t\tonClick={this.showTweets}\n\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\tbackgroundColor: '#486983b4',\n\t\t\t\t\t\t\t\t\tcolor: '#e1e8ed',\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<Button.Content visible>\n\t\t\t\t\t\t\t\t\t<Icon name=\"paper plane outline\" size=\"big\" />\n\t\t\t\t\t\t\t\t</Button.Content>\n\t\t\t\t\t\t\t\t<Button.Content hidden>\n                                    go!\n\t\t\t\t\t\t\t\t</Button.Content>\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t);\n\t\t} else {\n\t\t\treturn (\n\t\t\t\t<>\n\t\t\t\t\t{/* <div className=\"App\">Tweeta</div> */}\n\t\t\t\t\t<Tweeta\n\t\t\t\t\t\tcityname={this.state.city}\n\t\t\t\t\t\tcity={this.state.cityfile}\n\t\t\t\t\t\thandleExit={this.handleExit}\n\t\t\t\t\t/>\n\t\t\t\t</>\n\t\t\t);\n\t\t}\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'semantic-ui-css/semantic.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}